package com.mycompany.paintbrush;

import java.awt.Color;
import java.awt.event.MouseEvent;
import javax.swing.JColorChooser;
import javax.swing.UIManager;

public class MainPainel extends javax.swing.JFrame {
    
    // Instancia de um novo pincel e um ponteiro.
    Pincel p = new Pincel();
    JColorChooser paleta;
    
    /**
     * Creates new form MainPainel
     */
    public MainPainel() {
        initComponents();
        p.canvas = Canvas.getGraphics();
        paleta = jColorChooser1;
        
        paleta.setColor(Color.black);
        painelCor.setBackground(paleta.getColor());
        
        colorRoundButton.setSelected(true);
        Brush1.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BrushGroup = new javax.swing.ButtonGroup();
        colorGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        Brush1 = new javax.swing.JRadioButton();
        Brush2 = new javax.swing.JRadioButton();
        Brush3 = new javax.swing.JRadioButton();
        Brush4 = new javax.swing.JRadioButton();
        Brush5 = new javax.swing.JRadioButton();
        Brush6 = new javax.swing.JRadioButton();
        Brush7 = new javax.swing.JRadioButton();
        Brush8 = new javax.swing.JRadioButton();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        Canvas = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        painelCor = new javax.swing.JPanel();
        painelCor2 = new javax.swing.JPanel();
        colorRoundButton = new javax.swing.JRadioButton();
        colorRoundButton2 = new javax.swing.JRadioButton();
        jColorChooser1 = new javax.swing.JColorChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        BrushGroup.add(Brush1);
        Brush1.setText("Ponto");
        Brush1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Brush1ActionPerformed(evt);
            }
        });

        BrushGroup.add(Brush2);
        Brush2.setText("Linha");
        Brush2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Brush2ActionPerformed(evt);
            }
        });

        BrushGroup.add(Brush3);
        Brush3.setText("Retangulo");
        Brush3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Brush3ActionPerformed(evt);
            }
        });

        BrushGroup.add(Brush4);
        Brush4.setText("Circulo");
        Brush4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Brush4ActionPerformed(evt);
            }
        });

        BrushGroup.add(Brush5);
        Brush5.setText("Cilindro");
        Brush5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Brush5ActionPerformed(evt);
            }
        });

        BrushGroup.add(Brush6);
        Brush6.setText("Spray");
        Brush6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Brush6ActionPerformed(evt);
            }
        });

        BrushGroup.add(Brush7);
        Brush7.setText("Borracha");
        Brush7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Brush7ActionPerformed(evt);
            }
        });

        BrushGroup.add(Brush8);
        Brush8.setText("Poligono");
        Brush8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Brush8ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Exibir info");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed1(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Brush1)
                    .addComponent(Brush2)
                    .addComponent(Brush4)
                    .addComponent(Brush5)
                    .addComponent(Brush6)
                    .addComponent(Brush8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Brush3)
                    .addComponent(Brush7)
                    .addComponent(jCheckBox1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(Brush1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Brush2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Brush3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Brush4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Brush5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Brush6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Brush8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Brush7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addContainerGap())
        );

        Canvas.setBackground(new java.awt.Color(255, 255, 255));
        Canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                CanvasMouseDragged(evt);
            }
        });
        Canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CanvasMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CanvasMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CanvasMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout CanvasLayout = new javax.swing.GroupLayout(Canvas);
        Canvas.setLayout(CanvasLayout);
        CanvasLayout.setHorizontalGroup(
            CanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        CanvasLayout.setVerticalGroup(
            CanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 485, Short.MAX_VALUE)
        );

        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel2MouseEntered(evt);
            }
        });

        painelCor.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout painelCorLayout = new javax.swing.GroupLayout(painelCor);
        painelCor.setLayout(painelCorLayout);
        painelCorLayout.setHorizontalGroup(
            painelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        painelCorLayout.setVerticalGroup(
            painelCorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        painelCor2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout painelCor2Layout = new javax.swing.GroupLayout(painelCor2);
        painelCor2.setLayout(painelCor2Layout);
        painelCor2Layout.setHorizontalGroup(
            painelCor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        painelCor2Layout.setVerticalGroup(
            painelCor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        colorGroup.add(colorRoundButton);
        colorRoundButton.setText("Cor");
        colorRoundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorRoundButtonActionPerformed(evt);
            }
        });

        colorGroup.add(colorRoundButton2);
        colorRoundButton2.setText("Cor 2");
        colorRoundButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorRoundButton2ActionPerformed(evt);
            }
        });

        jColorChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jColorChooser1PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(painelCor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colorRoundButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(painelCor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colorRoundButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(painelCor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(colorRoundButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(painelCor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorRoundButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 32, Short.MAX_VALUE))
                    .addComponent(Canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Canvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Brush1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Brush1ActionPerformed
        // Pincel é a mesma coisa que ponto.
        p.figura = "ponto";
        System.out.println("Pincel : Ponto");
    }//GEN-LAST:event_Brush1ActionPerformed

    private void Brush2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Brush2ActionPerformed
        // Troca o modo de desenho para linha
        p.figura = "linha";
        System.out.println("Pincel : Linha");
    }//GEN-LAST:event_Brush2ActionPerformed

    private void Brush3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Brush3ActionPerformed
        p.figura = "retangulo";
        System.out.println("Pincel : Retangulo");
    }//GEN-LAST:event_Brush3ActionPerformed

    private void Brush4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Brush4ActionPerformed
        p.figura = "circulo";
        System.out.println("Pincel : Circulo");
    }//GEN-LAST:event_Brush4ActionPerformed

    private void Brush5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Brush5ActionPerformed
        p.figura = "cilindro";
        System.out.println("Pincel : Cilindro");
    }//GEN-LAST:event_Brush5ActionPerformed

    private void Brush6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Brush6ActionPerformed
        p.figura = "spray";
        System.out.println("Pincel : Spray");
    }//GEN-LAST:event_Brush6ActionPerformed

    private void Brush7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Brush7ActionPerformed
        p.figura = "borracha";
        System.out.println("Pincel : Borracha");
    }//GEN-LAST:event_Brush7ActionPerformed

    private void CanvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CanvasMouseClicked
        // Click do mouse
        System.out.println("Mouse : click");
        String fig = p.figura;
        switch(fig){
            case "ponto":
                p.setInicio(evt.getX(), evt.getY());
                p.drawPonto(painelCor.getBackground());
                break;
            case "borracha":
                p.setInicio((evt.getX() - 10), (evt.getY() - 10));
                p.setFim(((evt.getX() + 10) - p.xi), ((evt.getY() + 10) - p.yi));
                p.erase();
                break;
            case "poligono":
                // TODO salvar posição do evt em um vetor se click esquerdo.
                // desenhar poligono se click direito
                if(evt.getButton() == MouseEvent.BUTTON1){
                    System.out.println("Pincel : Registrando ponto poligono");
                    p.savePoint(evt.getX(), evt.getY());
                }else{
                    System.out.println("Pincel : Desenhando poligono");
                    p.drawPoligono(painelCor.getBackground(), painelCor2.getBackground());
                }
                break;
            case "spray":
               // p.setInicio(evt.getX(), evt.getY());
                p.x = evt.getX();
                p.y = evt.getY();
                p.drawSpray(painelCor.getBackground());
                break;
            default:
                System.out.println("Deu algo errado! :V");
                break;
        }
    }//GEN-LAST:event_CanvasMouseClicked

    private void CanvasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CanvasMousePressed
        // Prechionar do mouse
        System.out.println("Mouse : segurando");
        String fig = p.figura;
        switch(fig){
            case "ponto":
                p.setInicio(evt.getX(), evt.getY());
                p.drawPonto(painelCor.getBackground());
                break;
            case "linha":
                System.out.println("Pincel : registrando inicio Linha");
                p.setInicio(evt.getX(), evt.getY());
                break;
            case "retangulo":
                System.out.println("Pincel : registrando inicio retangulo");
                p.setInicio(evt.getX(), evt.getY());
                break;
            case "circulo":
                System.out.println("Pincel : registrando inicio circulo");
                p.setInicio(evt.getX(), evt.getY());
                break;
            case "cilindro":
                System.out.println("Pincel : registrando inicio cilindro");
                p.setInicio(evt.getX(), evt.getY());
                break;
            case "borracha":
                p.setInicio((evt.getX() - 10), (evt.getY() - 10));
                p.setFim(((evt.getX() + 10) - p.xi), ((evt.getY() + 10) - p.yi));
                p.erase();
                break;
            case "poligono":
                break;
            case "spray":
                System.out.println("Pincel : registrando inicio spray");
                //p.setInicio(evt.getX(), evt.getY());
                p.x = evt.getX();
                p.y = evt.getY();
                p.drawSpray(painelCor.getBackground());
                break;
            default:
                System.out.println("Deu algo errado! :V");
                break;
        }
    }//GEN-LAST:event_CanvasMousePressed

    private void CanvasMouseReleased(java.awt.event.MouseEvent evt) {                                     
        // Soltar do mouse
        System.out.println("Mouse : solto");
        // Variaveis auxiliares
        int fimX, fimY;
        // Quando solta o mouse, marca o ponto final nas variaveis x e y do pincel
        // e chama a função desenho da respectiva forma, passando como parametro as cores dos paineis de seleção de cor.
        switch(p.figura){
            case "ponto":
                break;
            case "linha":
                p.setFim(evt.getX(), evt.getY());
                p.drawLinha(painelCor.getBackground());
                break;
            case "retangulo":
                // Se ponto final é menor que ponto inicial, inverte.
                if(p.xi > evt.getX()){
                    p.x = p.xi;
                    p.xi = evt.getX();
                }else p.x = evt.getX();
                if(p.yi > evt.getY()){
                    p.y = p.yi;
                    p.yi = evt.getY();
                }else p.y = evt.getY();
                // Pega a distancia do ponto final até o inicial, pois 
                // drawRect() soma uma largura a ser desenhada e não desenha de um ponto a outro;
                fimX = p.x - p.xi;
                fimY = p.y - p.yi;
                p.setFim(fimX, fimY);             
                p.drawRetangulo(painelCor.getBackground(), painelCor2.getBackground());
                break;
            case "circulo":
                // Se ponto final é menor que ponto inicial, inverte.
                if(p.xi > evt.getX()){
                    p.x = p.xi;
                    p.xi = evt.getX();
                }else p.x = evt.getX();
                if(p.yi > evt.getY()){
                    p.y = p.yi;
                    p.yi = evt.getY();
                }else p.y = evt.getY();
                
                // Pega a distancia do ponto final até o inicial, pois 
                fimX = p.x - p.xi;
                fimY = p.y - p.yi;
                
                p.setFim(fimX, fimY);             
                p.drawElipse(painelCor.getBackground(), painelCor2.getBackground());
                break;
            case "cilindro":
                // Se ponto final é menor que ponto inicial, inverte.
                if(p.xi > evt.getX()){
                    p.x = p.xi;
                    p.xi = evt.getX();
                }else p.x = evt.getX();
                if(p.yi > evt.getY()){
                    p.y = p.yi;
                    p.yi = evt.getY();
                }else p.y = evt.getY();
                // Pega a distancia do ponto final até o inicial, pois 
                fimX = p.x - p.xi;
                fimY = p.y - p.yi;
                
                p.setFim(fimX, fimY);             
                p.drawCilindro(painelCor.getBackground(), painelCor2.getBackground());
                break;
            case "borracha":
                break;
            case "poligono":
                break;
            default:
                System.out.println("Deu algo errado! :V");
                break;
        }
    }                                    

    private void CanvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CanvasMouseDragged
        // Arrastar do mouse
        if(p.figura.equals("ponto")){
            p.setInicio(evt.getX(), evt.getY());
            p.info = false;
            p.drawPonto(painelCor.getBackground());
        }
        if(p.figura.equals("borracha")){
            p.setInicio((evt.getX() - 10), (evt.getY() - 10));
            p.setFim(((evt.getX() + 10) - p.xi), ((evt.getY() + 10) - p.yi));
            p.erase();
        }
        if(p.figura.equals("spray")){
           // p.setInicio(evt.getX(), evt.getY());
            p.x = evt.getX();
            p.y = evt.getY();
            p.info = false;
            p.drawSpray(painelCor.getBackground());
        }
//        System.out.println("Mouse : arrastando");
    }//GEN-LAST:event_CanvasMouseDragged

    private void colorRoundButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        painelCor.setBackground(paleta.getColor());
    }                                                

    private void colorRoundButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        painelCor2.setBackground(paleta.getColor());
    }                                                 

    private void jColorChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {                                              
        System.out.println("changed");
    }                                             

    private void jPanel2MouseEntered(java.awt.event.MouseEvent evt) {                                     
        if(colorRoundButton.isSelected()){
            painelCor.setBackground(paleta.getColor());
        }else painelCor2.setBackground(paleta.getColor());
    }                                    

    private void Brush8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Brush8ActionPerformed
        p.figura = "poligono";
        System.out.println("Pincel : Poligono");
    }//GEN-LAST:event_Brush8ActionPerformed

    private void jCheckBox1ActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed1
        p.info = !p.info;
        System.out.println("Pincel : informações = " + p.info);
    }//GEN-LAST:event_jCheckBox1ActionPerformed1

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPainel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPainel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPainel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPainel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPainel().setVisible(true);
            }
        });
    }

    //<editor-fold defaultstate="collapsed" desc=" Variables Declaration (UI) ">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Brush1;
    private javax.swing.JRadioButton Brush2;
    private javax.swing.JRadioButton Brush3;
    private javax.swing.JRadioButton Brush4;
    private javax.swing.JRadioButton Brush5;
    private javax.swing.JRadioButton Brush6;
    private javax.swing.JRadioButton Brush7;
    private javax.swing.JRadioButton Brush8;
    private javax.swing.ButtonGroup BrushGroup;
    private javax.swing.JPanel Canvas;
    private javax.swing.ButtonGroup colorGroup;
    private javax.swing.JRadioButton colorRoundButton;
    private javax.swing.JRadioButton colorRoundButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel painelCor;
    private javax.swing.JPanel painelCor2;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}
